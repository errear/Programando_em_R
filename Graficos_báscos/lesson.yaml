- Class: meta
  Course: Programando em R
  Lesson: Graficos Básicos 
  Author: David Kane
  Type: Standard
  Organization: Williams College
  Version: 0.1.1

- Class: text
  Output: Um dos pontos positivos do R, relativo às outras linguagens, é a facilidade de criacao de gráficos com qualidade de publicaćao. Nessa licao, você vai aprender sobre os graficos básicos no R.



- Class: text
  Output: Não falaremos sobre gráficos avanćados no R durante esta licao. Que são os gráficos feitos pelos pacotes lattice, ggplot2 e ggvis 

- Class: text
  Output: Há pessoas que acreditam que este método seja ultrapassado, que nós deveriamos ensinar ggplot2 primeiro. Veja  http://varianceexplained.org/r/teach_ggplot2_to_beginners/ se quiser ver os argumentos.


- Class: cmd_question
  Output:  Carregue  os dados cars  digitando (cars).
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: Digite  data(cars) para carregar os dados.

- Class: text
  Output: Para enfatizar os conceitos, nós iremos trabalhar com dados simples. Nosso objetivo é apresentar várias funćoes gráficas e seus argumentos. Os resultados seriam mais interessantes com conjuntos de dados maiores e mais complexos.


- Class: cmd_question
  Output:  Abra a página de ajuda dos dados cars.
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)', 'help("plot")')
  Hint: Digite  ?cars ou help(cars)  para ver a página de ajuda com os detalhes sobre o data frame.

- Class: text
  Output: "Como você pode ver na página de ajuda, cars tem apenas duas variaveis: speed e stopping distance. Perceba que os dados são de 1920."

- Class: cmd_question
  Output:  Rode head() sobre os dados cars.
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: Digite  head(cars)  para ver os primeiros registros do data frame.

- Class: text
  Output: Antes de desenhar os gráficos, é sempre uma boa ideia ter alguma noćão dos dados. Os comandos chaves para isso incluem  dim(), names(), head(), tail() and summary().


- Class: cmd_question
  Output: Rode  plot() para o data frame cars. 
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: Digite plot(cars) para criar um gráfico com os dados de cars.


- Class: text
  Output: Como sempre, o R tenta devolver algo que faća sentido  a partir da informaćão que você deu. Primeiro, o R  percebe que o data frame que você deu a ele tem apenas duas colunas, então ele pressume que você quer um gráfico de uma coluna versus a outra.


- Class: text
  Output: Segundo, como você não deu nomes para os eixos, o R usa o nome das colunas. Terceiro, são criadas marcas nos eixos nos números arredondados. O R também usa outras općões de fabrica "default" que estão na funćão plot.

- Class: text
  Output: Mas atenćao, nem sempre o R é tão experto assim. Ele pode entender errado e o resultado ser completamente diferente do que se espera.

- Class: text
  Output: Nós vamos agora gastar um tempo explorando a funćão plot, mas muito do que vamos falar se aplica a maioria das outras funćoes graficas (básicas) no R.


- Class: cmd_question
  Output: Veja a página de ajuda para a funcao  plot(). 
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint:  Digite  ?plot or help(plot)  para ver a página de ajuda de  plot().

- Class: text
  Output: A página de ajuda da funcao plot() evidencia os diferentes argumentos que a funcáo pode ter. Os dois mais importantes são x e o y, as variaveis que serão usadas no gráfico. Nas próximas questões inclua os nomes dos argumentos em tuas respostas. Ou seja, não digite simplesmente plot(cars$speed, cars$dist), pois não irá acertar a questão. Ao inves disso use  plot(x = cars$speed, y = cars$dist).

- Class: cmd_question
  Output: Use plot() para mostrar speed no eixo x e dist no eixo y  usando o dados do data frame cars. Use a forma do comando plot na qual os vetores são explicitamente passados como argumentos para x e y.

 CorrectAnswer: plot(x = cars$speed, y = cars$dist)
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist)')
  Hint: Digite  plot(x = cars$speed, y = cars$dist) para criar o gráfico.

- Class: text
  Output: Veja que isso produz um gráfico um pouco diferente que plot(cars). Nesse caso, o R está certo que você quer usar os nomes das colunas nos eixos, então ele usa o argumento que você passou, com o nome do data frame e o sinal de dolar.


- Class: text
  Output: Veja que há outros meios de usar o comando plot. Por exemplo, nós podemos ter um gráfico similar ao anterior com plot(dist ~ speed, cars). Entretanto, nós iremos falar mais sobre usar a interface de formulas mais tarde.
 
- Class: cmd_question
  Output: Use plot() para ver dist no eixo x e spped no eixo y. Isso é o oposto que fizemos no último gráfico.
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: Digite  plot(x = cars$dist, y = cars$speed) para criar o gráfico.

- Class: text
  Output: Provavelmente tem mais sentido speed ir no eixo x  pois a distancia de parada é uma funcao da velocidade. Então, para o resto das questões dessa lićao, sempre coloque speed no eixo x.
  
- Class: text
  Output:  De fato, você pode manter a reposta para as próximas questões na forma plot(x = cars$speed, y = cars$dist, ...) mas com vários outros argumentos usados no lugar de ... .

- Class: cmd_question
  Output: Recrie o gráfico nomeando o eixo x como "Speed". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Speed")  para criar o gráfico.

- Class: cmd_question
  Output: Recrie o gráfico nomeando o eixo y como  "Stopping Distance". 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") para criar o gráfico.

- Class: cmd_question
  Output:  Recrie o gráfico com "Speed" e "Stopping Distance" como nomes dos eixos. 
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")')
  Hint: Digite plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance") para criar o gráfico.

- Class: text
  Output:  O motivo que plot(cars) funcionou no comeco dessa licao foi que o R é experto suficiente para saber que o primeiro elemento (i.e. a primeira coluna) em cars deve ser  o argumento x e a segunda ao elemento y. As próximas respostas serão todas no formato plot(cars,...) com vários argumentos adicionados.


- Class: text
  Output: Em cada questão, nós vamos adicionar um argumento por vez. Claro que você pode passar mais que um argumento de cada vez quando estiver produzindo um gráfico real.


- Class: cmd_question
  Output: Faća o grafico com o título principal "My Plot". Atenćao que o argumento para título é "main" e não "title".
  CorrectAnswer: plot(cars, main = "My Plot")
  AnswerTests: omnitest(correctExpr='plot(cars, main = "My Plot")')
  Hint: Digite plot(cars, main = "My Plot") para criar o gráfico.

- Class: cmd_question
  Output: Faca um gráfico com subtítulo "My Plot Subtitle".
  CorrectAnswer: plot(cars, sub = "My Plot Subtitle")
  AnswerTests: omnitest(correctExpr='plot(cars, sub = "My Plot Subtitle")')
  Hint: Digite plot(cars, sub = "My Plot Subtitle")  para criar o gráfico.

- Class: text
  Output: A página de ajuda (?plot) cobre apenas um pequeno número dos muitos argumentos que podem ser utilizados com o plot() e outras funćoes gráficas. Para comećar a explorar outras opcoes, veja  ?par. Vamos ver alguns dos argumentos mais comunmente usados. Continue usando plot(cars, ...)  como resposta base para estas questões.

- Class: cmd_question
  Output: Faća o gráfico de cars colorindo os pontos em vermelho. (Use col = 2)
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Digite plot(cars, col = 2) para criar o gráfico.

- Class: cmd_question
  Output: Faća o gráfico cars  limitando o eixo x entre 10 e 15.  (Use xlim = c(10, 15)) 
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Digite plot(cars, xlim = c(10, 15)) para criar este gráfico.

- Class: text
  Output: Você também pode alterar o formato dos simbolos no gráfico. A página de ajuda para points (?points) tem mais detalhes.


- Class: cmd_question
  Output: Faća o gráfico cars  usando triangulos.  (Use pch = 2.) 
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Digite plot(cars, pch = 2) para criar o gráfico.

- Class: text
  Output: Argumentos como "col" e "pch" podem não parecer muito intuitivo. E realmente eles não são. Muitas pessoas usam pacotes mais modernos como ggplot2 para criar os graficos em R. 


- Class: text
  Output: Entretanto, uma introdućao aos  gráficos baśicos  é muito útil pois muito do mesmo  "vocabulário" é usado no lattice e ggplot2 

- Class: text
  Output: Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

- Class: cmd_question
  Output: Load the mtcars data frame. 
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Type data(mtcars) to load the data.

- Class: text
  Output: Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type play(). This temporarily suspends the lesson (without losing the work you have already done) and allows you to issue commands like dim(mtcars) and head(mtcars). Once you are done examining the data, just type nxt() and the lesson will pick up where it left off.

- Class: cmd_question
  Output: Look up the help page for boxplot(). 
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Type ?boxplot or help(boxplot) to view a help page with details about boxplot.

- Class: text
  Output: Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire data frame. This is what the "data" argument in boxplot() allows.

- Class: text
  Output: boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.

- Class: cmd_question
  Output: Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Type boxplot(formula = mpg ~ cyl, data = mtcars) to create the plot.

- Class: text
  Output: The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we explored with plot() above to add axis labels, titles and so on.

- Class: text
  Output: When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is best used by just passing in a single vector. 

- Class: cmd_question
  Output: Use hist() with the vector mtcars$mpg to create a histogram.
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: Type hist(mtcars$mpg) to create the plot.

# Not sure what a good lesson length is for this. 
# Might add some information on saving plots.
# Other functions that I use include identify().

- Class: text
  Output: In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2 package. If you want to explore other elements of base graphics, then this web page (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of 
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
  

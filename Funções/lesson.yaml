- Class: meta
  Course: Programando em R
  Lesson: Functions
  Author: Sean Kross
  Translation: Carlos Tonhatti
  Type: Standard
  Organization: swirlstats
  Version: 2.2.14

- Class: text
  Output: Funcoes são os blocos fundamentais da linguagem R. Eles são pequenas pećas de code reusaveis que podem ser tratados com qualquer outro objeto R.

- Class: text
  Output: "Se voce já fez outras partes desse curso, voce provavelmente já usou funcoes. 
As funcoes são normalmente caraterizadas pelo nome da funcao seguida por parenteses."

- Class: cmd_question
  Output: "Vamos tentar usar algumas funcoes basicas por diversao. A funcao Sys.Date() retorna uma string representando a data de hoje.
 Digite Sys.Date() abaixo e veja o que acontece."
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: "Veja a data de hoje digitando: Sys.Date()"

- Class: text
  Output: "A maioria das funcoes no R retorna um valor. Funcoes como Sys.date() retorna um valor baseado no ambiente do teu computador, 
enquanto outras funcoes manipulam os dados entrados para computar o valor de retorna." 

- Class: cmd_question
  Output: "A funcao mean() recebe um vetor de números como entrada e retorna a média de todos os números do vetor de entrada.
 Entradas para as funcoes sao chamadas argumentos. Providenciar argumentos para uma funcao é também chamado de passar argumentos para essa funcao.
 Argumentos que voce quer passar para uma funcao vao dentro  dos parenteses. Tente passar o argumento c(2,4,5) para a funcao mean()."

  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: "Compute  a média de  2, 4, e 5  digitando: mean(c(2, 4, 5))"

- Class: text
  Output: Funcoes normalmente recebem argumentos os quais sao variaveis as quais as  funcoes [matemáticas]. Por exemplo, a funcao mean()recebe um vetor como um argumento, como no caso de mean(c(2,6,8)). A funcao mean() entao soma todos os números do vetor e divide essa soma pelo comprimento do vetor.

- Class: text
  Output: Nas questões seguintes você terá que modificar um script que irá aparecer assim que você for passando entre as questões. Salve as modificacoes no script e digite submit() e o script será avaliado. Há alguns comentérios no script quando ele abrir. Leia estes comentários!

- Class: script
  Output: A última expressao no R será avaliada em uma funcao que ira retornar o valor daquela funcao. Nós queremos que a funcao receba um argumento, x, e retorna x sem modifica-lo. Delete o "#" para que isso aconteca. Não esqueca de salvar seu script antes de digitar submit().
  AnswerTests: test_func1()
  Hint:  Verifique se deletou o "#" antes do x dentro da funcao.
  Script: boring_function.R

- Class: cmd_question
  Output: "Agora que voce criou sua primeira funcao vamos testa-la! Digite: boring_function("My first function!"). Se sua funcao funcionar, a resposta será a string: "My first function!"
  CorrectAnswer: "boring_function('My first function!')"
  AnswerTests: omnitest(correctExpr="boring_function('My first function!')")
  Hint: "Teste boring_function  digitando: boring_function('My first function!')"

- Class: text
  Output: "Parabens pela sua primeira funcao. Ao escrever funcoes, voce entende melhor como o R funciona. Como John Chambers, o criador do R uma vez disse: \n\n Para entender como o R funciona o R, dois slogans são úteis: 1. Tudo que existe no R é um objeto. 2. Tudo que acontece é uma chamada de uma funcao."


- Class: cmd_question
  Output: " Se voce quiser ver o codigo fonte para qualquer funcao, apenas digite o nome da funcao sem qualquer argumento ou parenteses. Vamos tentar isso com a funcao que voce acabou de criar. Digite boring_function para ver seu codigo fonte."
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: "Para ver o codigo fonte apenas digite: boring_function"

- Class: text
  Output: "Agora é o momento de fazer uma funcao mais útil! Nós vamos replicar a funcao mean() criando a funcao chamada: my_mean(). Lembre-se que para calcular a média de todos os números em um vetor voce acha a soma de todos os números em um vetor, e dividir a soma pelo comprimento desse vetor."


- Class: script
  Output: Tenha certeza de salvar seu script antes de digitar submit().
  AnswerTests: test_func2()
  Hint: "Use a funcao sum() para somar todos os números em um vetor. Use a funcao length para achar o comprimento desse vetor."
  Script: my_mean.R
  
- Class: cmd_question
  Output: "Agora teste sua funcao my_mean() achando a média do vetor c(4,5,10)."
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: "Rode a funcao my_mean(c(4, 5, 10))  para testar tua nova funcao." 

- Class: text
  Output: "Agora, vamos tentar escrever uma funcao com argumentos padroes. Voce pode configurar valores para os argumentos da sua funcao, e isso pode ser útil se voce pensar que alguem que irá usar a sua funcao vai configurar o argumento com o mesmo valor na maioria das vezes."

- Class: script
  Output: Tenha certeza em salvar seu script antes de digitar submit().
  AnswerTests: test_func3()
  Hint: "Lembre-se de configurar os valores apropriados!"
  Script: remainder.R

- Class: cmd_question
  Output: "Vamos fazer alguns testes com a funcao remainder. Rode remainder(5) e veja o que acontece."
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: "Vamos testar digitando: remainder(5)"

- Class: text
  Output: "Vamos examinar o que aconteceu. Voce providenciou um argumento para a funcao, e o R combina o argumento "num" desde que "num" é o primeiro argumento. O valor padrao para "divisor" é 2, entao a funcao usa o valor padrao que voce providenciou.
  
- Class: cmd_question
  Output: "Agora vamos testar a funcao remainder providenciando dois argumentos.  Digite remainder(11, 5) e vamos ver o que acontece."
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: "Vamos testar a sua funcao  remainder digitando: remainder(11, 5)"

- Class: text
  Output: "Mais uma vez os argumentos foram combinados da maneira correta."

- Class: cmd_question
  Output: "Voce pode expecificar os argumentos de forma explicita para uma funcao. Quando voce explicitamente designa um argumento pelo nome, a ordem dos argumentos torna-se não importante. Voce pode tentar isso digitando: remainder(divisor = 11, num = 5)."
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: " A ordem não interessa quando voce explicita o argumento! Test isso digitando: remainder(divisor = 11, num = 5)"

- Class: text
  Output: "Como voce pode ver, há uma diferenca entre  remainder(11, 5) e remainder(divisor = 11, num = 5)!"

- Class: cmd_question
  Output: "O R pode combinar parcialmente os argumentos. Tente digitar remainder(4, div = 2) para ver esta caracteristica em aćao."
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: "Teste a combinacao parcial digitando remainder(4, div = 2)"

- Class: text
  Output: "UMA PALAVRA DE AVISO: de modo geral voce quer fazer um codigo que seja o mais facil de ser entendido. Trocando a ordem dos argumentos especificando seus nomes ou usando nomes de argumentos parciais pode ser confuso, use isso com cuidado!" 

- Class: cmd_question
  Output: "Com tudo o que falamos sobre argumentos, Você pode estar se perguntando se tem uma maneira que você pode ver os argumentos de uma função (além de olhar para a documentação). Ainda bem, voce pode usar a funcao args()! Digite: args(remainder) para examinar os argumentos para a funcao remainder."
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: " Veja os argumentos da funcao remainder digitando: args(remainder)"

- Class: text
  Output: "Você pode não perceber, mas eu apenas enganei você para fazer algo
    bastante interessante! args() é uma função, o remainder () é uma função, ainda remainder foi um argumento para args (). Sim, é verdade: você pode passar funções como argumentos! Este é um conceito muito poderoso. Vamos escrever um script para ver como funciona."

- Class: script
  Output: Salve seu script antes de digitar submit().
  AnswerTests: test_func4()
  Hint: "Esteja certo que quando voce passa uma funcao como um argumento voce passa o nome da funcao sem parenteses!"
  Script: evaluate.R

- Class: cmd_question
  Output: "Vamos pegar sua nova função evaluate() para ver! Use evaluate para
    encontrar o desvio padrão do vetor c(1.4, 3.6, 7.9, 8.8)."
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: " A funcao para desvio padrao é chamado sd(). Esteja certo que quando vc passa uma funcao como um argumento voce passa o nome da funcao sem parenteses!"


- Class: text
  Output: " A idea de passar funcoes como argumentos para outras funcoes é um conceito importante e fundamental em programaćao."

- Class: text
  Output: "Voce pode estar surpreso em aprender que voce pode passar uma funcao como um argumento sem primeiro definir a funcao passada. Funcoes que nao sao nomeadas sao conhecidas como funcoes anonimas."

- Class: text
  Output: "Vamos usar a funcao evaluate para explorar como funciona as funcoes anonimas. Para o primeiro argumento da funcao evaluate nós vamos escrever uma pequena funcao que ajusta uma linha. No segundo argumento nós vamos passar alguns dados para esta pequena funcao anonima que passamos como primeiro argumento." 

- Class: cmd_question
  Output: "Digite o seguinte comando e então nós vamos discutir com ela funciona  evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: "Apenas digite o comandoevaluate(function(x){x+1}, 6)"

- Class: text
  Output: "O primeiro argumento é uma pequena funcao anonima que recebe um argumento e retorna "x+1". Nós passamos o número 6 para essa funcao então a expressao avalia para 7."


- Class: cmd_question
  Output: "Tente usar evaluate() para uma funcao anonima que retorna o primeiro elemento do vetor c(8,4,0). Sua funcao anonima deve receber um argumento o qual deve ser a variavel "x".
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: " Voce deve lembrar como indexar os elementos de um vetor. Lembre que sua funcao anonima deve ter apenas um argumento e que este argumento deve ser nomeado como "x".

- Class: cmd_question
  Output: " Agora tente usar evaluate() com uma funcao anonima que retorna o último elemento do  elemento do vetor c(8,4,0). Sua funcao anonima deve receber um argumento o qual deve ser a variavel "x".

  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: "Voce deve lembrar como indexar os elementos de um vetor. Lembre que sua funcao anonima deve ter apenas um argumento e que este argumento deve ser nomeado como "x". Usando length() em sua funcao anonima pode ser útil."

- Class: cmd_question
  Output: " Usaremos a funcao paste com bastante frequencia a partir de agora. Digite ?paste para ver a documentacao para esta funcao."
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: "Apenas digite: ?paste"

- Class: text
  Output: " Como voce pode ver o primeiro argumento de paste() é "..." o qual é referido como reticencias ou ponto-ponto-ponto.  As reticencias permite que um número indefinido de argumentos possam ser passados para a funcao. No caso de paste() qualquer número de strings pode ser passado como argumento e paste() irá retornar todos eles combinados em um único string."


- Class: cmd_question
  Output: ' Para ver como paste() funciona, digite paste("Programming", "is", "fun!")'
  CorrectAnswer: paste("Programming", "is", "fun!")
  AnswerTests: omnitest(correctExpr='paste("Programming", "is", "fun!")')
  Hint: 'Digite: paste("Programming", "is", "fun!")'

- Class: text
  Output: "Agora é hora de escrever sua própria funcao modificada de paste()."
 

- Class: script 
  Output: Não esqueća de salvar seu script antes de digitar submit().
  AnswerTests: test_func5()
  Hint: "Lembre-se que os argumentos vão depois de ..."
  Script: telegram.R

- Class: cmd_question
  Output: "Vamos testar sua funcao telegrama. Use sua nova funcao telegram passando qualquer argumento que voce quiser!."
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: 'Use  a funcao telegram com qualquer argumento que voce quiser."

- Class: script
  Output:  Não esqueća de salvar seu script antes de digitar submit().
  AnswerTests: test_func6()
  Hint: " Sua funcao deve ter tres secoes: capturar as reticencias em uma list(), desempacotar os argumentos das reticencias e atribui-los a variaveis, e entao passar estas variaveis para o paste().
  Script: mad_libs.R

- Class: cmd_question
  Output: " Agora use sua funcao mad_libs. Esteja certo de nomear o lugar, o adjetivo e o substantivo na ordem que sua funcao usa.
  CorrectAnswer: mad_libs(adjective = "", place = "", noun = "")
  AnswerTests: expr_uses_func('mad_libs')
  Hint: 'Use a funcao mad_libs e esteja certo que os argumentos place, adjective e noun estejam nomeados corretamente.

- Class: text
  Output: "Nós estamos indo para o final dessa licao. mas há ainda uma ideia que gostaria que voce pensasse."

- Class: text
  Output: " Voce é familiar com a adicao, subtracao, multiplicacao e divisao de números no R. Para fazer isso voce usa os simbolos  +,_,* e /. Estes simbolos são chamados operadores binários pois eles recebem duas entradas, uma a esquerda e outra a direita."
 

- Class: text
  Output: " No R voce pode definir seus próprios operadores binários. No próximo script voce vai ver como."

- Class: script
  Output:  Não esqueća de salvar seu script antes de digitar submit()
  AnswerTests: test_func7()
  Hint: "lembre-se: 'Hello' %p% 'student!'  é como se usa o operador binário"
  Script: bin_op.R

- Class: cmd_question
  Output: "Voce fez o seu operador binário! Vamos testa-lo. Junte  as strings: 'I', 'love', 'R!'  usando o seu novo operador binário"
  CorrectAnswer: "'I' %p% 'love' %p% 'R!'"
  AnswerTests: omnitest(correctExpr="'I' %p% 'love' %p% 'R!'")
  Hint: 'Use %p% entre cada string.'

- Class: text
  Output: " Voce chegou ao final dessa licao. Agora voce pode escrever funcoes e ganhar o mundo. Funcoes com nomes são as mais comuns e usadas para todos os propositos. Funcoes anonimas são usadas para pequenas transformacoes nos dados e, normalmente usadas dentro de outras funcoes. Operadores binários facilitam a compreensao do código. Depende de qual uso você quer fazer." 
- Class: text
  Output:  "Prefira dividir as tarefas em várias funcoes diferentes ao inves de fazer uma grande funcao que faća tudo de uma vez. Isso facilita o processo de testes e correcao alem de deixar o código muito mais amigavel e legivel.

 
- Class: mult_question
  Output: Você quer enviar o log  dessa sessão?
  AnswerChoices: Sim;Não
  CorrectAnswer: Sim
  AnswerTests: submit_log()
  Hint: Type a hint.
  

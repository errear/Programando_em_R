- Class: meta
  Course: Programação em R
  Lesson: Lógica
  Author: Sean Kross
  Type: Standard
  Organization: swirlstats
  Tradução: Carlos Tonhatti
  Version: 2.2.15

- Class: text
  Output: Esta lição é uma breve introdução a operações lógicas em R.

- Class: text
  Output: Existem dois valores lógicos em R, conhecidos como booleanos. Eles são TRUE (Verdadeiro) e FALSE (Falso).
    Em R você pode construir expressões lógicas que serão avaliadas como TRUE ou FALSE. 


- Class: text
  Output: "Muitas questões dessa lição irão envolver avaliação de expressões lógicas. Pode ser útil abrir um segundo terminal de R onde você poderá experimentar um pouco dessas expressões."

- Class: cmd_question
  Output: Criar expressões lógicas requer operadores lógicas. Você é provavelmente familiar com operadores aritiméticos como `+`, `-`, `*`, e`/`. O primeiro operador lógico que nós vamos discutir é o operador de igualdade, representado por dois sinais de igual "==". Use o operador de igualdade abaixo para saber se TRUE é igual a TRUE.
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Use o operador de igualdade e digite TRUE==TRUE.

- Class: text
  Output: Da mesma forma que aritimética, expressões lógicas podem ser agrupados por parenteses então a expressão  (TRUE == TRUE) == TRUE  é avaliada como TRUE
 

- Class: cmd_question
  Output: Para testar está propriedade, tente avaliar (FALSE==TRUE) == FALSE.
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: "Apenas digite: (FALSE == TRUE) == FALSE"

- Class: cmd_question
  Output: O operador de igualdade pode ser usado para comparar números. Use "==" para ver se 6 é igual a 7.
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: Use  o operador de igualdade 6 == 7

- Class: text
  Output: A expressão anterior avalia como FALSE (Falso) porque 6 é menor que 7. Ainda bem, que existe operadores de inequalidade que permitem testar se um valor é menor ou maior que outro valor.


- Class: cmd_question
  Output: O operador menor que "<" testa se o número do lado  esquerdo do operador (chamado de operando esquerdo) é menor que o número do lado direito do operador (chamado de operando direito). Escreva um expressão que teste se 6 é menor que 7.
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: Use o operador menor que e digite 6 < 7

- Class: cmd_question
  Output: Há também o operador menor-que-ou-igual-a `<=` o qual testa se o operando esquerdo é menor que ou igual ao operando direito. Escreva uma expressão que teste se 10 é menor que ou igual a 10.
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: Use o operador `<=` e digite 10 <= 10
  
- Class: text
  Output: Lembre-se que há os operadores maior que "> " e maior que ou igual a  `>=`.

- Class: mult_question
  Output: 'Qual  expressão é avaliada como  FALSE (Falsa)?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36 
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: Se você precisar, você pode avaliar cada expressão em uma sessão  de R separada para achar a resposta correta. 


- Class: mult_question
  Output: 'Qual  expressão é avaliada como TRUE (Verdadeira)?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7 
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: Se você precisar, você pode avaliar cada expressão em uma sessão  de R separada para achar a resposta correta. 



- Class: cmd_question
  Output: O próximo operador que vamos discutir é o operador "não igual" representado pelo "!=". Não iguais testam se dois valores são desiguais, então TRUE !=FALSE avalia como TRUE. Como o operador de igualdade, "!=" pode ser usado com números. Tente escrever uma expressão para ver se 5 é não igual a 7.
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: Use não iguais, digite 5 != 7

- Class: cmd_question
  Output: Para negar uma expressão booleana você pode usar o operador NOT (não). Um ponto de exclamacão "!" irá avaliar !TRUE (fala-se: não verdade) como FALSE e !FALSE (fala-se não falso) para avaliar como TRUE. Tente usar o operador NOT e o operador igual para encontrar o oposto de se 5 é igual a 7.
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: Essa expressão pode ser um tanto complicado, então pense em negar a expressão 5==7 (tudo que é necessário um ponto de exclamacão na frente)

- Class: text
  Output:

Vamos tomar um momento para revisar. O operador igual "==" testa is dois valores booleanos ou numéricos são iguais, o operador não igual "!=" testa se dois valores booleanos ou numéricos são desiguais, e o operator não "!" nega a expressão lógica estão expressões TRUE se tornam FALSE e  expressões FALSE se tornam TRUE.
- Class: mult_question
  Output: Qual das seguintes expressões avalia como FALSE?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint:  Se você precisar, você pode avaliar cada expressão em uma sessão  de R separada para achar a resposta correta. 



- Class: mult_question
  Output: ' Qual o resultado da avaliacão da seguinte expressão: (TRUE != FALSE) == !(6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Can there be objective truth when programming?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: ' Tente avaliar cada expressão isoladamente e junte as expressões para responder.'

- Class: text
  Output: Em algum momento você pode precisar examinar as relacões entre multiplas expressões lógicas. Para isso existe o operador AND (E) e o operator OR (ou).

- Class: cmd_question
  Output: Vamos ver como o operador AND funciona. Há dois operadores AND no R, "&" e "&&". Ambos operadores funcionam de modo similar, se o operando esquerdo  e o direito de AND forem TRUE a expressão inteira é TRUE, de outro modo é FALSE. Por exemplo, TRUE & TRUE avalia como TRUE. Tente digitar FALSE & FALSE e veja como isso é avaliado.
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: " Apenas para ilustrar como o operador AND funciona digite: FALSE & FALSE"

- Class: cmd_question
  Output: " Você pode usar o operador "&" para avaliar AND por todo o vetor. A versão "&&" do AND avalia o primeiro elemento do vetor. Vamos colocar isso em prática. Digite a expressão TRUE & c(TRUE, FALSE, FALSE)."

  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: " Agora para ver como o operador AND funciona com vetor, digite: TRUE & c(TRUE, FALSE, FALSE)"

- Class: text
  Output: O que acontece nesse caso é que o operando esquerdo "TRUE" é reciclado para todo elemento no vetor do operando direito. Isso  é equivalente a declaracão c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE). 

- Class: cmd_question
  Output: "Agora vamos digitar a mesma expressão exceto que nós vamos usar o operador "&&". Digite a expressão TRUE && c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE && c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: " Como você irá ver, a versão && do AND funciona de modo diferente. Digite: TRUE && c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "Nesse caso, o operador esquerdo é apenas avaliado com o primeiro membro do operando direito (o vetor). O restante dos elementos no vetor não são avaliados nessa expressão."
    
- Class : text
  Output: O operador OR (ou) segue o mesmo conjunto de regras. A versão "|" do OR avalia OR por todo vetor, enquanto a versão "||" do OR apenas avalia o primeiro membro do vetor.

 
- Class : text
  Output: Uma expressão usando o operador OU irá avaliar como TRUE se o operando esquerdo ou o direito serem TRUE. Se ambos forem TRUE, a expressão irá avaliar como TRUE, no entanto se nenhum for TRUE, então a expressão será avaliada como FALSE.
    
- Class: cmd_question
  Output: " Vamos testar a versão vetorizada do operador OU. Digite a expressão TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: " Teste  o operador vetorizado OU digitando: TRUE | c(TRUE, FALSE, FALSE)"
  
- Class: cmd_question
  Output: "Agora vamos tentar a versão não vetorizada do operador R. Digite a expressão TRUE || c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE || c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Hint: " Como você pode ver a versão "||" do OU não é vetorizada digite: 
    TRUE || c(TRUE, FALSE, FALSE)"
  
- Class : text
  Output: "Operadores lógicos podem ser encadeados juntos como os operadores aritiméticos, expressões como: 
     `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3  || FALSE` são perfeitamente normais e comuns de serem vistas."
  
- Class : cmd_question
  Output: "Como você pode se lembrar existe uma ordem entre os  operadores aritméticos como também nas expressões lógicas. Todos os operadores E são avaliados antes operadores OU. Vamos olhar um exemplo de um caso ambíguo. Digite:  5 > 8 || 6 != 8 && 4 > 3.9"
  CorrectAnswer: "5 > 8 || 6 != 8 && 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: " Veja como a ordem das operacões funcionan digitando:  
    5 > 8 || 6 != 8 && 4 > 3.9"
  
- Class : text
  Output:" Vamos dar uma olhada na ordem dos operadores no caso acima. Primeiro os operandos esquerdo e o direito do operador E são avaliados. 6 não é igual a 8, 4 é maior que 3.9, então ambos operadores são TRUE resultando na experessão  `TRUE && TRUE`  avalia como TRUE. Então o operando esquerdo do operador é avaliado: 5 não é maior que 8 então a expressão inteira é reduzida para FALSE || TRUE. Uma vez que  o operando direito dessa expressão é TRUE  a expressão inteira que é avaliada como TRUE."
    
- Class: mult_question
  Output: Qual das seguintes expressões avalia como TRUE?
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: 'Tente avaliar cada expressão isoladamente para construir a resposta.'
  
- Class: mult_question
  Output: Qual das seguintes expressões avalia como FALSE?
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79; 6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint:'Tente avaliar cada expressão isoladamente para construir a resposta.'
  
  
- Class : text
  Output: "Agora que você está familiar com os operadores lógicos você pode tirar vantagem de algumas funcoes que o R prove para lidar com expressões lógicas."

- Class : cmd_question
  Output: "A funcão is TRUE() tem um argumento. Se esse argumento é avaliado como TRUE, a funcão vai retornar TRUE. Caso contrário, a funcão irá retornar FALSE.
    Tente usar esta funcão digitando: isTRUE(6 > 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Teste  isTRUE() digitando: isTRUE(6 > 4)"
  
- Class: mult_question
  Output:  Qual das seguintes expressões avalia como TRUE?
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE); isTRUE(3); isTRUE(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: 'isTRUE() irá retornar TRUE se a declaracao passada como argumento é TRUE.'
  
- Class : cmd_question
  Output: "A funcão identical() irá retornar TRUE se os dois objetos passados como argumentos são idênticos. Tente a funcão identical() digitando: identical('twins', 'twins')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: " Se você quiser ver se os dois objetos são idênticos, digite: identical('twins', 'twins')"
  
- Class: mult_question
  Output:  Qual das seguintes expressões avalia como TRUE?
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "identical()  irá retornar TRUE apenas se os argumentos forem o exatamente iguais."
  
- Class : cmd_question
  Output: "Você tem que conhecer a funcão xor(), o qual recebe dois argumentos. A funcão xor() significa como OU exclusivo. Se um argumento for avaliado como TRUE e um argumento avaliado como FALSE, então essa funcão irá retornar TRUE, caso contrário irá retornar FALSE. Tente a funcão xor() digitando: xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Teste a funcão xor() digitando:  xor(5 == 6, !FALSE)"
  
- Class : text
  Output: "5 == 6 

evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
    evaluates to TRUE. On the other hand if the first argument was changed to 5 == 5
    and the second argument was unchanged then both arguments would have been TRUE, 
    so xor(TRUE, TRUE) would have evaluated to FALSE."
    
- Class: mult_question
  Output:  Qual das seguintes expressões avalia como FALSE?
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "Para xor() seja avaliado como TRUE, um argumento deve ser TRUE e o outro deve ser FALSE."
    
- Class : cmd_question
  Output: "Para a próximas questões, vamos criar um vetor de inteiros chamado ints. Crie um vetor digitando:
 ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "Para criar um vetor de 10 inteiros  sem repeticão digite: ints <- sample(10)"
  
- Class : cmd_question
  Output: "Agora simplesmente mostre o conteúdo de ints."
  CorrectAnswer: "ints"
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "Para ver o conteúdo do vetor digite: ints"
  
- Class : cmd_question
  Output: " O vetor "ints" é uma amostra aleatória de inteiros de 1 a 10 sem repeticão. Vamos dizer que queremos perguntar algumas questões lógicas sobre os conteúdos do ints. Se nós digitamos ints > 5, nós vamos obter um vetor lógico correspondente ao quanto cada elemento de ints é maior que 5. Tente digitando: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "Para ver quais elementos de "ints" são maiores que 5 digite: ints > 5"
  
- Class : text
  Output: "Nós podemos usar o vetor de resultado lógico para perguntas outras questões sobre ints. A funcão which() recebe um vetor lógico como um argumento e retorna os índices do vetor que são TRUE. Por exemplo, which(c(TRUE, FALSE, TRUE)) irá retornar o vetor c(1, 3)."

- Class : cmd_question
  Output: "Use a funcão which() para achar os índices de ints que são maiores que 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Use a funcão which () no vetor lógico produzido por: ints >7"
  
- Class: mult_question
  Output: Qual das seguintes expressões vão retornar os índices dos elementos de int que são menores que ou iguais a 2?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Use a funcão which().'
  
- Class : text
  Output: "Como a funcão which(), as funcões  any() e all() recebem vetores lógicos como argumentos. A funcão any() irá retornar TRUE se um ou mais dos  elementos de um vetor lógico seja(m) TRUE. A funcão all() irá retornar TRUE se todo elemento no vetor lógico for TRUE"
    
- Class : cmd_question
  Output: "Use a funcão any() para ver se qualquer dos elementos de ints são menores que zero."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Use a funcão any() sobre o vetor lógico produzido por: ints < 0"

  
- Class : cmd_question
  Output: " Use a funcão para ver se todos os elementos de ints são maiores que zero."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Use  a funcão all() sobre o vetor lógico produzido por: `ints > 0`"
  
- Class: mult_question
  Output: Qual expressão é avaliada como TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() irá avaliar como TRUE se existir um ou mais elementos  TRUE no vetor lógico."
  
- Class : text
  Output: "Isso é tudo para introducão a lógica no R. Se você quiser ver o que você pode fazer com a lógica veja a licao sobre o controle de fluxo!"


- Class: mult_question
  Output: Voce quer enviar o log  dessa sessão?
  AnswerChoices: Sim;Não
  CorrectAnswer: Sim
  AnswerTests: submit_log()
  Hint: ""

